/*********************************************************************************************************************************************
 * 프로세스, 스레드, 고루틴
 *
 * 프로세스 : 명령과 사용자데이터, 시스템 영역, 실행 과정에 수집한 다른 종류의 리소스로 구성된 독립적인 실행단위
 * 프로그램 : 프로세스의 명령과 사용자 데이터를 초기화하는데 사용할 명령과 데이터를 담은 파일
 * 스레드 : 프로그램이나 프로세스보다 좀 더 가볍고 작은 실행 단위, 프로세스에서 생성되며 제어 흐름과 스택을 따로 갖는다.
 * 				간단히 말해 프로세스는 바이너리 파일을 실행한 것이고, 스레드는 프로세스의 일부분이다.
 *고루틴 :Go 프로그램에서 동시에 실행할 수 있는 최소 단위다. 고루틴은 유닉스 프로세스처럼 독립적인 개체가 아니고 유닉스 프로세스 안 스레드 안에 존재
 고루틴은 가벼워서 한 머신에서 수 천 내지 수만 개를 거뜬히 구동할 수 있다는 장점이 있다.


 * Go 스케쥴러
 * m : n 스케줄링 : m은 실행되는 고루틴의 개수, n은 고루틴을 멀티플렉싱할 OS스레드의 개수
 * Go 스케쥴러는 Go런타임의 구성 요소로서 Go 프로그램에 있는 고루틴의 실행 방법과 순서를 결정한다.
 * Go 프로그램의 모든 요소는 고루틴의 형태로 실행되기 때문에 스케쥴러의 요소는 매우 중요
 * Go 스케쥴러는 한 프로그램 안에 있는 고루틴만 다루기 때문에 커널의 스케쥴러에 비해 훨씬 간결하고, 효율적이고, 빠르게 작동
 *
 * 동시성과 병렬성
 * 동시성(concurrency) : 컴포넌트들을 최대한 독립적으로 실행 할 수 있게 구성하는 방식
 * 병렬성(Parallelism) : 특정한 개체들이 동시에 실행되는 것을 말함
 * 소프트웨어컴포넌트를 구성할 때 동시성을 지원해야만 안전하게 병렬로 실행할 수 있다.

 *Go 와 Rust의 동시성 모델 비교
 *Rust
 * rust 스레드는 유닉스 스레드와 같다. 따라서 무겁지만 기능은 많다.
 * rust도 Go와 마찬가지로 채널, 뮤텍스, 공유 변수를 이용해 메시지 전달과  공유상태 동시성을 지원한다.
 * 엄격한 타입 시스템과 소유권 체계를 토대로 안전한 스레드 뮤터블 상태를 제공한다. 이러한 규칙은 rust 컴파일러가 검사한다.
 * 상태 공유를 위한 rust 구조체가 제공된다.
 * 스레드가 잘못 작동하더라도 시스템이 죽지 않는다.
 *
*********************************************************************************************************************************************/
