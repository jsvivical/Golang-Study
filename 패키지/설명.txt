1. Go 패키지
Go는 패키지를 통해 코드의 모듈화, 코드의 재사용 기능을 제공한다.
GO는 패키지를 사용해서 작은 단위의 컴포넌트를 작성하고, 이러한 작은 패키지들을 활용해서 
프로그램을 작성할 것을 권장한다.

Go는 실제 프로그램 개발에 필요한 많은 패키지들을 표준 라이브러리로 제송한다.
이러한 표준 라이브러리 패키지들은 GOROOT/pkg안에 존재한다. 
GOROOT환경변수는 Go설치 디렉토리를 가리키는데, 보통 설치시 자동으로 추가된다.
즉, 윈도우즈에서 Go를 설치햇을 경우 디폴트로 C :/go에 설치되며, GOROOT는 C:/go를 가리킨다.


2.Main 패키지
일반적으로 패키지는라이브러리로서 사용되지만, "main"이라고 명명된 패키지는
Compiler에 의해 특별하게 인식된다. 패키지명이 main인 경우, 
컴파일러는 해당 패키지를 공유 라이브러리가 아닌 실행(.exe) 프로그램으로 만든다.
그리고 이 main패키지 안의 main()함수가 프로그램의 시작점, 즉, entry point가 된다.
패키지를 공유 라이브러리로 만들 때에는, main패키지나 main함수를 사용해서는 안된다.

3.import
패키지를 import 할 때, GOROOT 혹은 GOPATH 환경변수를 검색하는데,
표준 패키지는 GOROOT/pkg에서 그리고 사용자 패키지나 서드파티 패키지의 경우
GOPATH/pkg에서 패키지를 찾게된다.
사용자가 패키지가 있는 작업 디렉토리가 복수개의 경우, 세미콜론을 사용하여 연결한다.

4.패키지 Scope
패키지 내에는 함수, 구조체, 인터페이스, 메서드 등이 존재하는데, 이들의 이름이 첫 문자를
대문자로 시작하면 이는 public, 소문자로 시작하면 non-public으로 패키지 내부에서만 사용될 수 있다

6.사용자 정의 패키지 생성
개발자는 사용자 정의 패키지를 만들어 재사용 가능한 컴포넌트를만들어 사용할 수있다.
사용자 정의 라이브러리 패키지는 일반적으로 폴더를 하나 만들고 그 폴더 안에 
.go파일들을 만들어 구성한다. 하나의 서브폴더안에 있는 .go파일들은 동일한 
패키지명을 가지며, 패키지명은 해당 폴더의 이름과 같게 한다. 즉, 해당폴더에 있는 
여러 *.go 파일들은 하나의 패키지로 묶인다

