package main

import "fmt"

/***********************************************************************************************************************************
 * 타입 어써션 : x.(T)형식으로 표기하며, x는 인터페이스 타입, T는 특정한 타입을 지정
 * 이때, x에 실제로 저장된 값의 타입은 T고, T는 반드시 x의 인터페이스 타입을 따라야 한다.
 *
 * 타입 어써션의 기능
 * 1. 인터페이스 값이 특정한 타입을 따르는지 확인
 * 		타입어써션을 이렇게 활용할 때는 내부 값과 bool타입의 값이라는 두 가지 값을 리턴한다.
 * 		내부값은 실제로 사용하는 값, 불리언 값은 그 타입 어써션이 제대로 실행됏는지 여부를 알려준다.
 *
 * 2. 인터페이스에 저장된 구체적인 값을 이용하거나 이 값을 새 변수에 할당
 * 		다시말해 인터페이스에 int변수가 있을 때, 타입 어써션을 이용해 그 값을 가져올 수 있음
***********************************************************************************************************************************/

func main() {
	var myInt interface{} = 123 //myInt는 인터페이스 타입 //int타입을 동적으로 지정

	k, ok := myInt.(int) //인터페이스에서 int타입을 찾음
	if ok {
		fmt.Println("success : ", k)
	}

	v, ok := myInt.(float64) //myInt변수에은 float64값이 없기 때문에 에러를 처리하지 않으면 프로그램이 멈춤
	if ok {
		fmt.Println(v)
	} else {
		fmt.Println("Failed without panicking")
	}

	i := myInt.(int)
	fmt.Println("No checking : ", i)

	j := myInt.(bool)
	fmt.Println(j)

}
